"""
Модуль subprocess (раздел 10.1) предоставляетАР1, обеспечивающий создание
дополнительных процессов и обмен данными c ними. В частности, такая
возможность полезна для программ, обрабатывающих текст, поскольку указанный
API поддерживает двухсторонний обмен данными c новыми процессами через
стандартные каналы ввода-вывода.

Модуль signal (раздел 10.2) позволяет использовать механизм сигналов Unix
для передачи информации о событиях другим процессам. Сигналы обрабатываются
асинхронно — обычно c прерыванием текущих операций, выполняемых
программой в момент поступления сигнала. Обмен сигналами можно использовать
лишь в качестве грубого прототипа системы обмена сообщениями, но существуют
и другие, более надежные механизмы взаимодействия процессов, способные
обеспечивать доставку более сложных сообщений.

Модуль threading (раздел 10.3) включает высокоуровневый, объектно-
ориентированный API для управления одновременными вычислениями из Python.
Объекты потоков (Thread) выполняются в рамках одного и того же процесса,
разделяя общую память. Использование потоков — простейший способ
масштабирования задач, в которых процессор в основном простаивает
и большая часть времени тратится на обработку операций ввода-вывода


Модуль asyncio (раздел 10.5) предоставляет библиотеку, обеспечивающую
распараллеливание вычислений и управление асинхронным вводом-выводом c
использованием либо протоколов на основе классов, либо сопрограмм.
Он заменяет устаревшие модули asyncore и asynchat, которые по-прежнему
остаются доступными, но не рекомендованы к применени

Модуль concurrent.futures (раздел 10.6) предоставляет реализацию исполняющих 
объектов на основе потоков и процессов, которая обеспечивает управление
пулами ресурсов для выполнения параллельных задач

"""
