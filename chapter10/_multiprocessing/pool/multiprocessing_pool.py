# 10.4.17 Пулы процессов
"""
Класс Pool можно использовать для управления фиксированным количеством
рабочих процессов в тех простых случаях, когда работу можно разделить на
независимые части, распределяемые между процессами. Значения, возвращаемые
отдельными задачами, объединяются и возвращаются в виде списка. В число
аргументов конструктора Pool входят количество ггроцессов и функция,
подлежащая выполнению при запуске процесса отдельной задачи
(однократно вызывается каждым дочерним процессом)
"""
import multiprocessing


def do_calculation(data):
    return data * 2


def start_process():
    print('Starting', multiprocessing.current_process().name)


if __name__ == '__main__':
    """
    Результаты, получаемые c помощью метода map (), функционально эквивалентны 
    результатам, получаемым c помощью встроенной функции map (), за исключением 
    того, что отдельные задачи выполняются параллельно. Поскольку пул  обеспечивает 
    параллельную обработку всех своих входных данных, можно синхронизировать основной 
    процесс c процессами задач c помощью методов close() и join(), тем самым гарантируя 
    выполнение завершающих операций по освобождению неиспользуемых ресурсов.
    """
    inputs = list(range(10))
    print('Input   :', inputs)
    builtin_outputs = map(do_calculation, inputs)
    print('Built-in:', list(builtin_outputs))

    pool_size = multiprocessing.cpu_count() * 2
    pool = multiprocessing.Pool(
        processes=pool_size,
        initializer=start_process
    )
    pool_outputs = pool.map(do_calculation, inputs)
    pool.close()  # Больше нет задач
    pool.join()  # Обернуть текущие задачи

    print('Pool   :', pool_outputs)
